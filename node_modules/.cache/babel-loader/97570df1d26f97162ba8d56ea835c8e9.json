{"ast":null,"code":"var _jsxFileName = \"D:\\\\GITHUB\\\\Polyfrog\\\\polyfrog-frontend\\\\src\\\\views\\\\Teaser\\\\Teaser.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { Heading } from '@pancakeswap-libs/uikit';\nimport { BLOCKS_PER_YEAR } from 'config';\nimport Page from 'components/layout/Page';\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchFarmUserDataAsync } from 'state/actions';\nimport { QuoteToken } from 'config/constants/types';\nimport useI18n from 'hooks/useI18n';\nimport FarmCard from './components/FarmCard/FarmCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Farms = farmsProps => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const TranslateString = useI18n();\n  const farmsLP = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const bnbPrice = usePriceBnbBusd();\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const {\n    tokenMode\n  } = farmsProps;\n  const dispatch = useDispatch();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const [stakedOnly, setStakedOnly] = useState(false);\n  const activeFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && farm.pid !== 8);\n  const inactiveFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && farm.pid !== 8);\n  const stakedOnlyFarms = activeFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/egg/3ba.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({\n    theme\n  }) => theme.mediaQueries.lg} {\n    background-image: url('/images/egg/9.png');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n  `; // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n\n  const farmsList = useCallback((farmsToDisplay, removed) => {\n    // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n    // let userTotalTVL = new BigNumber(0);\n    // let userAllowance = 0;\n    const farmsToDisplayWithAPY = farmsToDisplay.map(farm => {\n      // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n      //   return farm\n      // }\n      const cakeRewardPerBlock = new BigNumber(farm.honestPerBlock || 1).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18));\n      const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR); // if (farm.userData) {\n      //   const userShare = new BigNumber(farm.userData.stakedBalance).div(1000000000000000000).multipliedBy(farm.tokenPriceVsQuote)\n      //   userTotalTVL = userTotalTVL.plus(userShare)\n      //   const userWL = Whitelist.find(add => add.wallet === account);\n      //   userAllowance = userWL.allowance\n      // }\n\n      let apy = cakePrice.times(cakeRewardPerYear);\n      let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        totalValue = totalValue.times(bnbPrice);\n      }\n\n      if (totalValue.comparedTo(0) > 0) {\n        apy = apy.div(totalValue);\n      }\n\n      return { ...farm,\n        apy\n      };\n    });\n    return farmsToDisplayWithAPY.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n      farm: farm,\n      removed: removed,\n      bnbPrice: bnbPrice,\n      cakePrice: cakePrice,\n      ethereum: ethereum,\n      account: account\n    }, farm.pid, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this));\n  }, [bnbPrice, account, cakePrice, ethereum]);\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: /*#__PURE__*/_jsxDEV(Hero, {\n      children: /*#__PURE__*/_jsxDEV(Heading, {\n        as: \"h1\",\n        size: \"xl\",\n        mb: \"24px\",\n        color: \"secondary\",\n        children: \"\\uD83D\\uDE9C Cabbage Carrot and other veggie NFTs Coming Soon... \\uD83D\\uDE9C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Farms, \"U7j0Q/3y0k3JMsUX/Kmgi5RmzpA=\", false, function () {\n  return [useRouteMatch, useI18n, useFarms, usePriceCakeBusd, usePriceBnbBusd, useWallet, useDispatch, useRefresh];\n});\n\n_c = Farms;\nexport default Farms;\n\nvar _c;\n\n$RefreshReg$(_c, \"Farms\");","map":{"version":3,"sources":["D:/GITHUB/Polyfrog/polyfrog-frontend/src/views/Teaser/Teaser.tsx"],"names":["React","useEffect","useCallback","useState","styled","useRouteMatch","useDispatch","BigNumber","useWallet","Heading","BLOCKS_PER_YEAR","Page","useFarms","usePriceBnbBusd","usePriceCakeBusd","useRefresh","fetchFarmUserDataAsync","QuoteToken","useI18n","FarmCard","Farms","farmsProps","path","TranslateString","farmsLP","cakePrice","bnbPrice","account","ethereum","tokenMode","dispatch","fastRefresh","stakedOnly","setStakedOnly","activeFarms","filter","farm","isTokenOnly","multiplier","pid","inactiveFarms","stakedOnlyFarms","userData","stakedBalance","isGreaterThan","Hero","div","theme","mediaQueries","lg","farmsList","farmsToDisplay","removed","farmsToDisplayWithAPY","map","cakeRewardPerBlock","honestPerBlock","times","poolWeight","pow","cakeRewardPerYear","apy","totalValue","lpTotalInQuoteToken","quoteTokenSymbol","BNB","comparedTo"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => { \n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && farm.pid !== 8)\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && farm.pid !== 8)\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/egg/3ba.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/egg/9.png');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n  `\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      // let userTotalTVL = new BigNumber(0);\n      // let userAllowance = 0;\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.honestPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n        // if (farm.userData) {\n        //   const userShare = new BigNumber(farm.userData.stakedBalance).div(1000000000000000000).multipliedBy(farm.tokenPriceVsQuote)\n        //   userTotalTVL = userTotalTVL.plus(userShare)\n        //   const userWL = Whitelist.find(add => add.wallet === account);\n        //   userAllowance = userWL.allowance\n        // }\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          🚜 Cabbage Carrot and other veggie NFTs Coming Soon... 🚜\n        </Heading>\n      </Hero>\n    </Page>\n  )\n}\n\nexport default Farms\n"]},"metadata":{},"sourceType":"module"}