{"ast":null,"code":"import poolsConfig from 'config/constants/pools';\nimport sousChefABI from 'config/abi/sousChef.json';\nimport cakeABI from 'config/abi/cake.json';\nimport multicall from 'utils/multicall';\nimport BigNumber from 'bignumber.js';\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\nexport const fetchPoolsBlockLimits = async () => {\n  const cakePools = poolsConfig;\n  const cakeStarts = await multicall(sousChefABI, cakePools.map(cakePool => ({\n    address: cakePool.contractAddress[CHAIN_ID],\n    name: 'startBlock'\n  })));\n  const cakeEnds = await multicall(sousChefABI, cakePools.map(cakePool => ({\n    address: cakePool.contractAddress[CHAIN_ID],\n    name: 'bonusEndBlock'\n  })));\n  return [...cakePools.map((poolConfig, index) => {\n    const startBlock = cakeStarts[index];\n    const endBlock = cakeEnds[index];\n    return {\n      sousId: poolConfig.sousId,\n      startBlock: new BigNumber(startBlock).toJSON(),\n      endBlock: new BigNumber(endBlock).toJSON()\n    };\n  })];\n};\nexport const fetchPoolsTotalStaking = async () => {\n  const cakePools = poolsConfig;\n  const cakePoolsTotalStaked = await multicall(cakeABI, cakePools.map(cakePool => ({\n    address: cakePool.stakingTokenAddress[CHAIN_ID],\n    name: 'balanceOf',\n    params: [cakePool.contractAddress[CHAIN_ID]]\n  })));\n  return [...cakePools.map((p, index) => ({\n    sousId: p.sousId,\n    totalStaked: new BigNumber(cakePoolsTotalStaked[index]).toJSON()\n  }))];\n};","map":{"version":3,"sources":["D:/GITHUB/Polyfrog/polyfrog-frontend/src/state/pools/fetchPools.ts"],"names":["poolsConfig","sousChefABI","cakeABI","multicall","BigNumber","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchPoolsBlockLimits","cakePools","cakeStarts","map","cakePool","address","contractAddress","name","cakeEnds","poolConfig","index","startBlock","endBlock","sousId","toJSON","fetchPoolsTotalStaking","cakePoolsTotalStaked","stakingTokenAddress","params","p","totalStaked"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,wBAAxB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAA7B;AAEA,OAAO,MAAMC,qBAAqB,GAAG,YAAY;AAC/C,QAAMC,SAAS,GAAGV,WAAlB;AACA,QAAMW,UAAU,GAAG,MAAMR,SAAS,CAChCF,WADgC,EAEhCS,SAAS,CAACE,GAAV,CAAeC,QAAD,KAAe;AAC3BC,IAAAA,OAAO,EAAED,QAAQ,CAACE,eAAT,CAAyBV,QAAzB,CADkB;AAE3BW,IAAAA,IAAI,EAAE;AAFqB,GAAf,CAAd,CAFgC,CAAlC;AAOA,QAAMC,QAAQ,GAAG,MAAMd,SAAS,CAC9BF,WAD8B,EAE9BS,SAAS,CAACE,GAAV,CAAeC,QAAD,KAAe;AAC3BC,IAAAA,OAAO,EAAED,QAAQ,CAACE,eAAT,CAAyBV,QAAzB,CADkB;AAE3BW,IAAAA,IAAI,EAAE;AAFqB,GAAf,CAAd,CAF8B,CAAhC;AAQA,SAAO,CACL,GAAGN,SAAS,CAACE,GAAV,CAAc,CAACM,UAAD,EAAaC,KAAb,KAAuB;AACtC,UAAMC,UAAU,GAAGT,UAAU,CAACQ,KAAD,CAA7B;AACA,UAAME,QAAQ,GAAGJ,QAAQ,CAACE,KAAD,CAAzB;AACA,WAAO;AACLG,MAAAA,MAAM,EAAEJ,UAAU,CAACI,MADd;AAELF,MAAAA,UAAU,EAAE,IAAIhB,SAAJ,CAAcgB,UAAd,EAA0BG,MAA1B,EAFP;AAGLF,MAAAA,QAAQ,EAAE,IAAIjB,SAAJ,CAAciB,QAAd,EAAwBE,MAAxB;AAHL,KAAP;AAKD,GARE,CADE,CAAP;AAWD,CA5BM;AA8BP,OAAO,MAAMC,sBAAsB,GAAG,YAAY;AAChD,QAAMd,SAAS,GAAGV,WAAlB;AACA,QAAMyB,oBAAoB,GAAG,MAAMtB,SAAS,CAC1CD,OAD0C,EAE1CQ,SAAS,CAACE,GAAV,CAAeC,QAAD,KAAe;AAC3BC,IAAAA,OAAO,EAAED,QAAQ,CAACa,mBAAT,CAA6BrB,QAA7B,CADkB;AAE3BW,IAAAA,IAAI,EAAE,WAFqB;AAG3BW,IAAAA,MAAM,EAAE,CAACd,QAAQ,CAACE,eAAT,CAAyBV,QAAzB,CAAD;AAHmB,GAAf,CAAd,CAF0C,CAA5C;AASA,SAAO,CACL,GAAGK,SAAS,CAACE,GAAV,CAAc,CAACgB,CAAD,EAAIT,KAAJ,MAAe;AAC9BG,IAAAA,MAAM,EAAEM,CAAC,CAACN,MADoB;AAE9BO,IAAAA,WAAW,EAAE,IAAIzB,SAAJ,CAAcqB,oBAAoB,CAACN,KAAD,CAAlC,EAA2CI,MAA3C;AAFiB,GAAf,CAAd,CADE,CAAP;AAMD,CAjBM","sourcesContent":["import poolsConfig from 'config/constants/pools'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport cakeABI from 'config/abi/cake.json'\nimport multicall from 'utils/multicall'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchPoolsBlockLimits = async () => {\n  const cakePools = poolsConfig\n  const cakeStarts = await multicall(\n    sousChefABI,\n    cakePools.map((cakePool) => ({\n      address: cakePool.contractAddress[CHAIN_ID],\n      name: 'startBlock',\n    })),\n  )\n  const cakeEnds = await multicall(\n    sousChefABI,\n    cakePools.map((cakePool) => ({\n      address: cakePool.contractAddress[CHAIN_ID],\n      name: 'bonusEndBlock',\n    })),\n  )\n\n  return [\n    ...cakePools.map((poolConfig, index) => {\n      const startBlock = cakeStarts[index]\n      const endBlock = cakeEnds[index]\n      return {\n        sousId: poolConfig.sousId,\n        startBlock: new BigNumber(startBlock).toJSON(),\n        endBlock: new BigNumber(endBlock).toJSON(),\n      }\n    }),\n  ]\n}\n\nexport const fetchPoolsTotalStaking = async () => {\n  const cakePools = poolsConfig\n  const cakePoolsTotalStaked = await multicall(\n    cakeABI,\n    cakePools.map((cakePool) => ({\n      address: cakePool.stakingTokenAddress[CHAIN_ID],\n      name: 'balanceOf',\n      params: [cakePool.contractAddress[CHAIN_ID]],\n    })),\n  )\n\n  return [\n    ...cakePools.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(cakePoolsTotalStaked[index]).toJSON(),\n    })),\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}